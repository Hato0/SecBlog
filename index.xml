<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hato0 - Blog</title><link>/</link><description>Hato0's cybersecurity journey</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>C2 detection using fingerprinting</title><link>/posts/blue_team/c2detection/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><author>Author</author><guid>/posts/blue_team/c2detection/</guid><description>Summary Adversaries leverage their access to assets using initial access tool (custom or not). These tools are mainly used to get a remote session of the asset.
This remote access is known as Command and Control (C2) and can be implemented through many protocols and many technics. This channel will allow adversaries to perform lateral movement, internal discovery, exfiltration and much more.
Willing to hunt for C2 in companies and homemade networks, I&amp;rsquo;ve focused my effort into C2 over HTTP.</description></item><item><title>Clickjacking</title><link>/posts/penetration_testing/clickjacking/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/clickjacking/</guid><description>Clickjacking Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.
Example (from imperva.com) :
The attacker creates an attractive page which promises to give the user a free trip to Tahiti. In the background the attacker checks if the user is logged into his banking site and if so, loads the screen that enables transfer of funds, using query parameters to insert the attackerâ€™s bank details into the form.</description></item><item><title>CORS attack</title><link>/posts/penetration_testing/cors/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/cors/</guid><description>Cross-origin resource sharing Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain. It can provide an attack vector to cross-domain based attacks, if a website&amp;rsquo;s CORS policy is poorly configured and implemented.
To check for the Access-Control-Allow-Origin value you can send a request including the following header: Origin: WEBSITE
The presence of Access-Control-Allow-Credentials is a good indicator of potential CORS.</description></item><item><title>CSRF attack</title><link>/posts/penetration_testing/csrf/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/csrf/</guid><description>Cross-site request forgery Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. This attack can happend by phishing, clone site, etc &amp;hellip; Conditions have to be present for this attack to be perform :
A relevant action. : Change password, email, rights, &amp;hellip; Cookie-based session handling. : Website with cookie base for sessions are an incredible candidate for this type of attack No unpredictable request parameters.</description></item><item><title>DOM-based vulnerabilities</title><link>/posts/penetration_testing/dom-based_vulnerabilities/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/dom-based_vulnerabilities/</guid><description>DOM-based vulnerabilities DOM-based vulnerabilities are based on javascript values controlled by attackers called source and use it in dangerous functions called sink (values can be cookies or whatever and functions can be eval like ones so by modifying the cookie you&amp;rsquo;ve got RCE).
Sources are very often :
document.URL document.documentURI document.URLUnencoded document.baseURI location document.cookie document.referrer window.name history.pushState history.replaceState localStorage sessionStorage IndexedDB (mozIndexedDB, webkitIndexedDB, msIndexedDB) Database Sink related to vulnerabilites are (thanks to portswigger):</description></item><item><title>HTTP request smuggling</title><link>/posts/penetration_testing/httpsmugling/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/httpsmugling/</guid><description>HTTP request smuggling HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.
HTTP request smuggling is an attack based on bad request handling between front and backend.</description></item><item><title>SQLi attack</title><link>/posts/penetration_testing/sqli/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/sqli/</guid><description>SQL injection A SQL injection (SQLi) is a type of security exploit in which the attacker adds Structured Query Language (SQL) code to a Web form input box in order to gain access to unauthorized resources or make changes to sensitive data.
An SQL query is a request for some action to be performed on a database. When executed correctly, a SQL injection can expose intellectual property, the personal information of customers, administrative credentials or private business details.</description></item><item><title>SSRF attack</title><link>/posts/penetration_testing/ssrf/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/ssrf/</guid><description>Server-side request forgery In a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources.
The attacker can supply or modify a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like http enabled databases or perform post requests towards internal services which are not intended to be exposed.</description></item><item><title>XSS attack</title><link>/posts/penetration_testing/xss/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/xss/</guid><description>Cross-site scripting Cross-site scripting is used to inject malicious javascript code to user browser.
This attack can lead to a total control of the application in use. More details and specific stuff can be found here
Basics Exploiting cross-site scripting to steal cookies This part represent the principal use of XSS. Web apps usually use cookies to save and remember sessions.
In that way, this attack get the cookie in question and send it back to your own domain so you can easily capture it.</description></item><item><title>XXE attack</title><link>/posts/penetration_testing/xxe/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>/posts/penetration_testing/xxe/</guid><description>XML external entity injection XXE is a specific attack against XML application. It can allow an attacker to view files, interact directly with the backend, or other application related to the corrupt one.
This attack is perform as an initial vector for SSRF. To check for the vulnerability you will have to intercept the request and change the post data. Post data are used in 99.99% for XML applications.
Basics External entities to retrieve files</description></item></channel></rss>