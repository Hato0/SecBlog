<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hato0 - Blog</title><link>https://www.hato0.xyz/</link><description>Hato0's cybersecurity journey</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.hato0.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>OwlGuard: A multi-instance SIEM rule manager.</title><link>https://www.hato0.xyz/posts/blue_team/owlguard/</link><pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/blue_team/owlguard/</guid><description>Summary OwlGuard is a platform designed to provide security teams a better way to manage SIEM rules. This tool aims to onboard clients efficiently just by using already developed rules and a simple connection to their SIEM. For now, only SPLUNK is supported, if the project get interest, other SIEM will be included in the support list.
Language used When I&amp;rsquo;m doing a project, I&amp;rsquo;m not only doing it to develop something that will be helpful for me or other but also to learn new things.</description></item><item><title>CTF: Huntress CTF</title><link>https://www.hato0.xyz/posts/ctf/huntress/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/ctf/huntress/</guid><description>Huntress Writeup Each challenges successfully solved will be explained here. The solution will not only be put in writing but also the way of thinking and failed tries will be described.
Unfortunately, took too long to write it (didn&amp;rsquo;t took note &amp;hellip;) so wasn&amp;rsquo;t able to re-do all the challenges before the server shutdown.
Read The Rules This challenge is pretty straight forward. Read the rules using the view-source utility and you will find a commented html line with the flag.</description></item><item><title>Bountease: a BugBounty recon script</title><link>https://www.hato0.xyz/posts/penetration_testing/bountease/</link><pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/bountease/</guid><description><![CDATA[Summary As I love both side of cybersecurity and as my job is blue team oriented, I&rsquo;m doing the red-teaming side on my personal life.
In that context, you may understand that I don&rsquo;t have a lot of time to perform the enumeration and reconnaissance of the target.
Fortunately, this phase is highly automatable, and that&rsquo;s what this post is about. I&rsquo;ve developed a recon script for Bug Bounty hunters that fit my needs (actually, I&rsquo;ll be the principal user) named Bountease.]]></description></item><item><title>C2 detection using fingerprinting</title><link>https://www.hato0.xyz/posts/blue_team/c2detection/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/blue_team/c2detection/</guid><description>Summary Adversaries leverage their access to assets using initial access tool (custom or not). These tools are mainly used to get a remote session of the asset.
This remote access is known as Command and Control (C2) and can be implemented through many protocols and many technics. This channel will allow adversaries to perform lateral movement, internal discovery, exfiltration and much more.
Willing to hunt for C2 in companies and homemade networks, I&amp;rsquo;ve focused my effort into C2 over HTTP.</description></item><item><title>Clickjacking</title><link>https://www.hato0.xyz/posts/penetration_testing/clickjacking/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/clickjacking/</guid><description>Clickjacking Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.
Example (from imperva.com) :
The attacker creates an attractive page which promises to give the user a free trip to Tahiti. In the background the attacker checks if the user is logged into his banking site and if so, loads the screen that enables transfer of funds, using query parameters to insert the attackerâ€™s bank details into the form.</description></item><item><title>CORS attack</title><link>https://www.hato0.xyz/posts/penetration_testing/cors/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/cors/</guid><description>Cross-origin resource sharing Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain. It can provide an attack vector to cross-domain based attacks, if a website&amp;rsquo;s CORS policy is poorly configured and implemented.
To check for the Access-Control-Allow-Origin value you can send a request including the following header: Origin: WEBSITE
The presence of Access-Control-Allow-Credentials is a good indicator of potential CORS.</description></item><item><title>CSRF attack</title><link>https://www.hato0.xyz/posts/penetration_testing/csrf/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/csrf/</guid><description>Cross-site request forgery Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. This attack can happend by phishing, clone site, etc &amp;hellip; Conditions have to be present for this attack to be perform :
A relevant action. : Change password, email, rights, &amp;hellip; Cookie-based session handling. : Website with cookie base for sessions are an incredible candidate for this type of attack No unpredictable request parameters.</description></item><item><title>DOM-based vulnerabilities</title><link>https://www.hato0.xyz/posts/penetration_testing/dom-based_vulnerabilities/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/dom-based_vulnerabilities/</guid><description>DOM-based vulnerabilities DOM-based vulnerabilities are based on javascript values controlled by attackers called source and use it in dangerous functions called sink (values can be cookies or whatever and functions can be eval like ones so by modifying the cookie you&amp;rsquo;ve got RCE).
Sources are very often :
document.URL document.documentURI document.URLUnencoded document.baseURI location document.cookie document.referrer window.name history.pushState history.replaceState localStorage sessionStorage IndexedDB (mozIndexedDB, webkitIndexedDB, msIndexedDB) Database Sink related to vulnerabilites are (thanks to portswigger):</description></item><item><title>HTTP request smuggling</title><link>https://www.hato0.xyz/posts/penetration_testing/httpsmugling/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/httpsmugling/</guid><description>HTTP request smuggling HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.
HTTP request smuggling is an attack based on bad request handling between front and backend.</description></item><item><title>SQLi attack</title><link>https://www.hato0.xyz/posts/penetration_testing/sqli/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><author>Hato0</author><guid>https://www.hato0.xyz/posts/penetration_testing/sqli/</guid><description>SQL injection A SQL injection (SQLi) is a type of security exploit in which the attacker adds Structured Query Language (SQL) code to a Web form input box in order to gain access to unauthorized resources or make changes to sensitive data.
An SQL query is a request for some action to be performed on a database. When executed correctly, a SQL injection can expose intellectual property, the personal information of customers, administrative credentials or private business details.</description></item></channel></rss>